// components/Map/Map.jsx
import React, { useState, useContext } from "react";
import { MapContainer, TileLayer, Marker, useMap, Popup } from "react-leaflet";
import L from "leaflet";
import "leaflet/dist/leaflet.css";

import geo from "../../assets/icons/icons8-location-48.png";
import styles from "./Map.module.scss";
import { DevicesListContext } from "../../context/GetDevicesList";
import { useSensors } from "../../context/SensorsContext";
import CoordinatesForm from "../CoordinatesForm/CoordinatesForm";

const DeviceMap = () => {
  const { devicesList } = useContext(DevicesListContext);
  const { sensors, updateOrCreateSensor, fetchSensors } = useSensors();

  const [selectedSensor, setSelectedSensor] = useState(null);
  const [editingDevEui, setEditingDevEui] = useState(null);
  const [coordsInput, setCoordsInput] = useState({ lat: "", lng: "" });
const [coordFormData, setCoordFormData] = useState(null); // {mode, devEui, ...}
const [isCoordModalOpen, setIsCoordModalOpen] = useState(false);

const openCoordinatesForm = (data) => {
  setCoordFormData(data);   // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (devEui, deviceName, mode –∏ —Ç.–¥.)
  setIsCoordModalOpen(true); // –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
};

const closeCoordinatesForm = () => {
  setCoordFormData(null);
  setIsCoordModalOpen(false);
};


  // –ò–∫–æ–Ω–∫–∞ –º–∞—Ä–∫–µ—Ä–∞
  const customIcon = new L.Icon({
    iconUrl: geo,
    iconSize: [50, 50],
  });

  // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ–ª—ë—Ç –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ–Ω—Å–æ—Ä—É
  const FlyToSensor = ({ sensor }) => {
    const map = useMap();
    if (sensor) {
      map.flyTo([sensor.latitude, sensor.longitude], 18, { duration: 2 });
    }
    return null;
  };

// –°–∫–ª–µ–∏–≤–∞–µ–º devicesList + sensors (–±–µ—Ä—ë–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ sensors!)
const devicesWithData = devicesList.map(device => {
  const sensorInfo = sensors.find(s => s.deveui === device.devEui);
  const recentReadings = device.lastReadings.slice(0, 3); // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á—Ç–µ–Ω–∏—è

   // console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ devicesList:', devicesList);
  // console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ sensorInfo:', sensorInfo);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ raw_data
  const findValueInRawData = (readings, field) => {
    for (const reading of readings) {
      try {
        const rawData = JSON.parse(reading.raw_data);
        const objectData = rawData.object || {};
        
        // –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ object (—Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
        if (objectData[field] !== null && objectData[field] !== undefined && objectData[field] !== "undefined") {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —á–∏—Å–ª–∞ –≤ —á–∏—Å–ª–∞
          const value = objectData[field];
          return typeof value === 'string' && !isNaN(value) ? parseFloat(value) : value;
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ raw_data:', e);
      }
    }
    return null;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –∏–ª–∏ raw_data
  const findValue = (readings, field) => {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
    for (const reading of readings) {
      if (reading[field] !== null && reading[field] !== undefined) {
        return reading[field];
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ, –∏—â–µ–º –≤ raw_data
    return findValueInRawData(readings, field);
  };

  // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ (—Å–∞–º–æ–≥–æ —Å–≤–µ–∂–µ–≥–æ) —á—Ç–µ–Ω–∏—è
  const baseData = recentReadings[0] || {};

  return {
    devEui: device.devEui,
    deviceName: device.deviceName,
    latitude: sensorInfo?.latitude || null,
    longitude: sensorInfo?.longitude || null,
    // –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–∞–º–æ–≥–æ —Å–≤–µ–∂–µ–≥–æ —á—Ç–µ–Ω–∏—è
    id: baseData.id || null,
    deduplicationId: baseData.deduplicationId || null,
    time: baseData.time || null,
    applicationName: baseData.applicationName || null,
    raw_data: baseData.raw_data || null,
    // –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á—Ç–µ–Ω–∏—è—Ö (–æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç + raw_data)
    temperature: findValue(recentReadings, 'temperature'),
    humidity: findValue(recentReadings, 'humidity'),
    pressure: findValue(recentReadings, 'pressure'),
    ph: findValue(recentReadings, 'ph'),
    conductivity: findValue(recentReadings, 'conductivity')
  };
});


console.log('–ò—Ç–æ–≥–æ–≤—ã–π devicesWithData:', devicesWithData);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  const handleSaveCoords = async (devEui) => {
    if (!coordsInput.lat || !coordsInput.lng) return;
    await updateOrCreateSensor(devEui, {
      latitude: parseFloat(coordsInput.lat),
      longitude: parseFloat(coordsInput.lng),
    });
    setEditingDevEui(null);
    setCoordsInput({ lat: "", lng: "" });
  };
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π –≤ —á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    const getFieldLabel = (key) => {
      const labels = {
        temperature: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        humidity: '–í–ª–∞–∂–Ω–æ—Å—Ç—å',
        pressure: '–î–∞–≤–ª–µ–Ω–∏–µ',
        ph: 'pH',
        conductivity: '–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç—å',
        rainfall: '–û—Å–∞–¥–∫–∏',
        windSpeed: '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞',
        windDirection: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞',
        batteryVoltage: '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏'
        // –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      };
      return labels[key] || key;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    const formatValue = (key, value) => {
      if (typeof value === 'number') {
        // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        const units = {
          temperature: '¬∞C',
          humidity: '%',
          pressure: ' hPa',
          ph: '',
          conductivity: ' ¬µS/cm',
          rainfall: ' mm',
          windSpeed: ' m/s',
          batteryVoltage: ' V'
        };
        return `${value}${units[key] || ''}`;
      }
      return value;
    };

  return (
  <div className={styles.mapContainer}>
    {/* –°–∞–π–¥–±–∞—Ä */}
    <div className={styles.sidebar}>
      <h3 className={styles.sidebarTitle}>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h3>
      <ul className={styles.sensorList}>
        {devicesWithData.map(device => {
          const hasCoordinates = device.latitude && device.longitude;

          return (
            <li key={device.devEui} className={styles.sensorItem}>
              <div className={styles.sensorRow}>
                <button
                  className={styles.sensorButton}
                  onClick={() => setSelectedSensor(device)}
                >
                  {device.deviceName} 
                </button>

                {!hasCoordinates && (
                  <button
                    className={styles.coordButton}
                    onClick={() =>
                      openCoordinatesForm({
                        mode: "update",
                        devEui: device.devEui,
                        deviceName: device.deviceName,
                      })
                    }
                  >
                    üìç –ó–∞–¥–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                  </button>
                )}

                {hasCoordinates && (
                  <button
                    className={styles.coordButton}
                    onClick={() =>
                      openCoordinatesForm({
                        mode: "update",
                        devEui: device.devEui,
                        deviceName: device.deviceName,
                        latitude: device.latitude,
                        longitude: device.longitude,
                      })
                    }
                  >
                    ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                  </button>
                )}
              </div>
            </li>
          );
        })}
      </ul>
    </div>

    {/* –ö–∞—Ä—Ç–∞ */}
    <div className={styles.map}>
      <MapContainer
        center={[44.61, 33.52]}
        zoom={10}
        style={{
          height: "100%",
          width: "100%",
          borderRadius: "10px",
          boxShadow: "0 5px 9px rgba(0, 0, 0, 0.1)"
        }}
      >
        <TileLayer
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          attribution="&copy; OpenStreetMap contributors"
        />

        {devicesWithData.map((device) => {
          if (!device.latitude || !device.longitude) {
            return null; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
          }

          return (
            <Marker
              key={device.devEui}
              position={[device.latitude, device.longitude]}
              icon={customIcon}
            >
              <Popup>
                <div className={styles.popupContainer}>
                  <h4 className={styles.header}>{device.deviceName}</h4>
                  <p className={styles.id}>
                    <b>DevEUI:</b> {device.devEui}<br/>
                  </p>
                  
                  {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ */}
                  <div className={styles.measurements}>
                    {Object.entries(device)
                      .filter(([key, value]) => 
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è –∏ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç—å
                        !['devEui', 'deviceName', 'id', 'deduplicationId', 'time', 
                          'applicationName', 'raw_data', 'latitude', 'longitude', 'conductivity'].includes(key) &&
                        value !== null && value !== undefined && value !== ''
                      )
                      .map(([key, value]) => (
                        <p key={key} className={styles.measurement}>
                          <b>{getFieldLabel(key)}:</b> {formatValue(key, value)}
                        </p>
                      ))
                    }
                  </div>
                </div>
              </Popup>
            </Marker>
          );
        })}

        <FlyToSensor sensor={selectedSensor} />
        <CoordinatesForm
          isOpen={isCoordModalOpen}
          onClose={closeCoordinatesForm}
          initialData={coordFormData}
          onSave={async (data) => {
            const latitude = parseFloat(String(data.latitude).replace(",", "."));
            const longitude = parseFloat(String(data.longitude).replace(",", "."));

            if (Number.isNaN(latitude) || Number.isNaN(longitude)) {
              alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 44.6123 –∏–ª–∏ 44,6123).");
              return;
            }

            try {
              await updateOrCreateSensor(data.devEui, {
                deviceName: data.deviceName,
                latitude,
                longitude,
              });

              if (fetchSensors) await fetchSensors();
              closeCoordinatesForm();
            } catch (err) {
              console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:", err);
              alert("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ‚Äî —Å–º. –∫–æ–Ω—Å–æ–ª—å.");
            }
          }}
        />
      </MapContainer>
    </div>
  </div>
);
};

export default DeviceMap;
